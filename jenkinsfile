def FAILED_STAGE = "";
pipeline {
  agent {
      node {
          label 'windows-sdk'
      }
  }

  stages {
	stage('setting up license') {
      steps {
        powershell '''
          $UNITY_PATH = $Env:UNITY_PATH
          $UNITY_SERIAL_KEY = $Env:UNITY_SERIAL_KEY
          $UNITY_ACCOUNT_EMAIL = $Env:UNITY_ACCOUNT_EMAIL
          $UNITY_ACCOUNT_PASSWORD = $Env:UNITY_ACCOUNT_PASSWORD

          $internetSettings = "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
          Set-ItemProperty -Path $internetSettings -Name ProxyServer -Value "$Env:PROXY_SERVER"
          Set-ItemProperty -Path $internetSettings -Name ProxyEnable -Value 0
		  
          & $UNITY_PATH -batchmode -nographics -quit -returnlicense
          Start-Sleep -s 30
          & $UNITY_PATH -batchmode -serial $UNITY_SERIAL_KEY -username $UNITY_ACCOUNT_EMAIL -password $UNITY_ACCOUNT_PASSWORD -nographics -quit
        '''
      }
    }
	
    stage('setting up proxy') {
      steps {
        powershell '''
          $internetSettings = "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
          Set-ItemProperty -Path $internetSettings -Name ProxyServer -Value "$Env:PROXY_SERVER"
          Set-ItemProperty -Path $internetSettings -Name ProxyEnable -Value 1
          
          $XMLfile = $Env:UNITY_PATH -replace "unity.exe","Data\\Mono\\etc\\mono\\2.0\\machine.config";
          [XML]$xml = Get-Content $XMLfile;

          if($xml.DocumentElement.'system.net'.defaultProxy -eq $null){
              $xml.DocumentElement.'system.net'.AppendChild($xml.CreateElement("defaultProxy"));}
          if($xml.DocumentElement.'system.net'.defaultProxy.proxy -eq $null){
              $child = $xml.DocumentElement.'system.net'["defaultProxy"].AppendChild($xml.CreateElement("proxy"));
              $child.setAttribute("proxyaddress","http://" + $Env:PROXY_SERVER);
              }
          else{
              $child = $xml.DocumentElement.'system.net'.defaultProxy.proxy;
              $child.setAttribute("proxyaddress","http://" + $Env:PROXY_SERVER);
              }
          $xml.Save($XMLfile);
        '''
      }
    }

    stage('cleanup') {
      steps {
        bat '''
          IF EXIST output (
            rd /s /q output
          )
          mkdir "%WORKSPACE%\\output"

          IF EXIST outputpackage (
            rd /s /q outputpackage
          )

          mkdir "%WORKSPACE%\\outputpackage"
          IF EXIST %WORKSPACE%\\unity.log ( del %WORKSPACE%\\unity.log )
          IF EXIST %WORKSPACE%\\unityTest.log ( del %WORKSPACE%\\unityTest.log )
          IF EXIST %WORKSPACE%\\unitypackage.log ( del %WORKSPACE%\\unitypackage.log )
          IF EXIST %WORKSPACE%\\testResult.xml ( del %WORKSPACE%\\testResult.xml )
        '''
      }
    }

    stage('build') {
      steps {
        powershell '''
          $GIT_PATH = $Env:GIT_PATH     
          $GIT_SHA = $GIT_COMMIT      
          $UNITY_PATH = $Env:UNITY_PATH
          $UNITY_SERIAL_KEY = $Env:UNITY_SERIAL_KEY
          $WORKSPACE = $Env:WORKSPACE
          $logfile = "$WORKSPACE\\unity.log"
          
          & Start-process -Wait $UNITY_PATH -ArgumentList "-quit","-batchmode","-nographics","-projectPath","`"$WORKSPACE\\UnitySampleProject`"","-executeMethod","JenkinsScript.PerformBuild","-logFile","`"$logfile`"","-serial","$Env:UNITY_SERIAL_KEY","-username","$Env:UNITY_ACCOUNT_EMAIL","-password","$Env:UNITY_ACCOUNT_PASSWORD"
          $lastOutput = Get-Content $logfile -Tail 2
          Get-Content $logfile

          if ( $lastOutput -eq "Exiting batchmode successfully now!" ) {
            echo "Unity Build successfully"
          } else {
            echo "Unity Build Error: Unexpected output"
            echo "Last Output:[$lastOutput]"
            exit 1
          }
        '''
      }

      post {
        failure {
          script{
            FAILED_STAGE = "build";
          }
        }
      }
    }

    stage('test') {
      steps {
        bat '''
          SET IAM_DATABASE_URL = %IAM_DATABASE_URL%
          SET NAMESPACE = %NAMESPACE%
          SET TABLE_PREFIX = %TABLE_PREFIX%
          SET AWS_ACCESS_KEY_ID = %AWS_ACCESS_KEY_ID%
          SET AWS_SECRET_ACCESS_KEY = %AWS_SECRET_ACCESS_KEY%
          SET AWS_REGION = %AWS_REGION%

          set IAM_BASE_URL=%IAM_BASE_URL%
          set ADMIN_CLIENT_ID=%ADMIN_CLIENT_ID%
          set ADMIN_CLIENT_SECRET=%ADMIN_CLIENT_SECRET%
          set ADMIN_NAMESPACE=%ADMIN_NAMESPACE%
          set ADMIN_USER=%ADMIN_USER%
          set ADMIN_PASSWORD=%ADMIN_PASSWORD%
          '''

        powershell '''      
          $GIT_PATH = $Env:GIT_PATH
          $GIT_SHA = $GIT_COMMIT
          $UNITY_PATH = $Env:UNITY_PATH
          $WORKSPACE = $Env:WORKSPACE
          $logfile = "$WORKSPACE\\unityTest.log"
          $testresult = "$WORKSPACE\\testResult.xml"

          $STEAM_PATH = $Env:STEAM_PATH
          $STEAM_ID = $Env:STEAM_ID
          $STEAM_PASS = $Env:STEAM_PASS

          & $STEAM_PATH -login $STEAM_ID $STEAM_PASS

          if ( ![System.IO.File]::Exists($testresult) ) {
            New-Item $WORKSPACE\\testResult.xml -ItemType file
            dir $WORKSPACE
          }

          $UNITY_CONFIG_JSON = @{PublisherNamespace=$Env:NAMESPACE; AppId=$Env:SDK_APP_ID; Namespace=$Env:ADMIN_NAMESPACE; IamServerUrl=$Env:IAM_BASE_URL; PlatformServerUrl=$Env:PLATFORM_BASE_URL; BasicServerUrl=$Env:BASIC_BASE_URL; LobbyServerUrl=$Env:LOBBY_SERVER_URL; TelemetryServerUrl=$Env:TELEMETRY_BASE_URL; ClientId=$Env:UE4_CLIENT_ID; ClientSecret=$Env:UE4_CLIENT_SECRET; WebLoginUrl=$Env:WEB_LOGIN_BASE_URL; RedirectUri=$Env:UE4_RedirectURI; CloudStorageServerUrl=$Env:CLOUD_STORAGE_BASE_URL; GameProfileServerUrl=$Env:GAME_PROFILE_BASE_URL; StatisticServerUrl=$Env:STATISTIC_BASE_URL} | ConvertTo-Json -Compress

          $UNITY_CONFIG_JSON | Out-File -FilePath "$WORKSPACE\\UnitySampleProject\\Assets\\Resources\\AccelByteSDKConfig.json"
          Get-Content -Path "$WORKSPACE\\UnitySampleProject\\Assets\\Resources\\AccelByteSDKConfig.json"

          & Start-process -Wait $UNITY_PATH -ArgumentList "-runTests","-batchmode","-nographics","-projectPath","`"$WORKSPACE\\UnitySampleProject`"","-logFile","`"$logfile`"","-testPlatform","playmode","-testResults","`"$testresult`"","-serial","$Env:UNITY_SERIAL_KEY","-username","$Env:UNITY_ACCOUNT_EMAIL","-password","$Env:UNITY_ACCOUNT_PASSWORD"
          $lastOutput = Get-Content $logfile -Tail 1
          Get-Content $logfile
          [xml]$xmlTestResult = Get-Content -Path $testresult
          
          # Cannot exit from test stage if "Steam" is active.
          Stop-Process -Name "Steam" -Force

          if ( $xmlTestResult.'test-run'.failed -eq 0 ) {
            if ( $xmlTestResult.ChildNodes -ne 0 ){
              Get-Content $testresult -Head 2
              echo "Unity Test successfully"
            }
          } else {
            Get-Content $testresult -Head 2
            echo "Unity Test Error: Unexpected output"
            exit 1
          }

          Get-Content $testresult | Select -Index 1 | Write-Host
        '''
      }

      post {
        failure {
          script{
            FAILED_STAGE = "test";
          }
        }
      }
    }

  stage('package') {
    steps {
      powershell '''
        $GIT_PATH = $Env:GIT_PATH      
        $GIT_SHA = $GIT_COMMIT       
        $UNITY_PATH = $Env:UNITY_PATH
        $WORKSPACE = $Env:WORKSPACE
        $BUILD_NUMBER = $Env:BUILD_NUMBER

        $logfile = "$WORKSPACE\\unitypackage.log"
        $unitypackage = "$WORKSPACE\\outputpackage\\AccelByteSDK-$GIT_SHA-BUILD-$BUILD_NUMBER.unitypackage"         

        & Start-process -Wait "$UNITY_PATH" -ArgumentList "-quit","-batchmode","-nographics","-projectPath","`"$WORKSPACE\\UnitySampleProject`"","-logFile","`"$logfile`"","-exportPackage","Assets\\AccelByte","`"$unitypackage`"","-serial","$Env:UNITY_SERIAL_KEY","-username","$Env:UNITY_ACCOUNT_EMAIL","-password","$Env:UNITY_ACCOUNT_PASSWORD"
        Get-Content $logfile
      '''
    }

    post {
      failure {
        script{
          FAILED_STAGE = "package";
        }
      }
    }
  }

  stage('publishapidocs') {
    steps {
      bat '''
        doxygen Doxyfile        
        aws s3 cp "%WORKSPACE%\\apidocs\\html" s3://docs.accelbyte.net/sdk/unity/ --recursive      
      '''
    }

    post {
      failure {
        script{
          FAILED_STAGE = "publishapidocs";
        }
      }
    }
  }

  stage('archive') {
    steps {        
      powershell '''
        $GIT_PATH = $Env:GIT_PATH 
        $GIT_SHA = $GIT_COMMIT

        $WORKSPACE = $Env:WORKSPACE
        $BUILD_NUMBER = $Env:BUILD_NUMBER        
        $ZIP_PATH = $Env:ZIP_PATH
        & "$ZIP_PATH\\7z.exe" a -t7z "$WORKSPACE\\outputpackage\\JusticeSampleGameDemo-$GIT_SHA-BUILD-$BUILD_NUMBER.7z" "$WORKSPACE\\output"
      '''
    }

    post {
      failure {
        script{
          FAILED_STAGE = "archive";
        }
      }
    }
  }
}

  post {
    success {
      script {
        def message = ""
        message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
        
        slackSend (channel: "#sdk-pipeline", color: '#36B37E', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *SUCCESSFUL* for `${env.JOB_NAME}` on branch `${env.GIT_BRANCH}` \n `${env.GIT_COMMIT}`: ${message} ")
        
        powershell'''
          $UNITY_PATH = $Env:UNITY_PATH
          
          $internetSettings = "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
          Set-ItemProperty -Path $internetSettings -Name ProxyServer -Value "$Env:PROXY_SERVER"
          Set-ItemProperty -Path $internetSettings -Name ProxyEnable -Value 0
              
          & $UNITY_PATH -batchmode -returnlicense -nographics -quit
		'''
      }
    }

    failure {
      script {
        def jobName = "${JOB_NAME}"
        def buildNumber = "${BUILD_NUMBER}"
        def gitBranch = "${GIT_BRANCH}"
        def buildURL = "${BUILD_URL}"
        def message = ""
        message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()        
		
        echo "jobName: ${JOB_NAME}"
        echo "buildNumber: ${BUILD_NUMBER}"
        echo "gitBranch: ${GIT_BRANCH}"
        echo "buildURL: ${BUILD_URL}"
		
        slackSend (channel: "#sdk-pipeline", color: '#FF0000', message: "<${env.BUILD_URL}console|Jenkin's Job #${env.BUILD_NUMBER}> *FAILED* on Stage `${FAILED_STAGE}` \nProject: `${env.JOB_NAME}` \nBranch: `${env.GIT_BRANCH}` \nCommit: `${env.GIT_COMMIT}` \nMessage: `${message}` ")
		
        powershell'''	
          $UNITY_PATH = $Env:UNITY_PATH
        
          $internetSettings = "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings"
          Set-ItemProperty -Path $internetSettings -Name ProxyServer -Value "$Env:PROXY_SERVER"
          Set-ItemProperty -Path $internetSettings -Name ProxyEnable -Value 0
        
          & $UNITY_PATH -batchmode -returnlicense -nographics -quit
        '''
      }
    }
  }
}